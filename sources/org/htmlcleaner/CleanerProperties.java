package org.htmlcleaner;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;
import org.htmlcleaner.audit.ErrorType;
import org.htmlcleaner.audit.HtmlModificationListener;
import org.htmlcleaner.conditional.ITagNodeCondition;
import org.htmlcleaner.conditional.TagNodeAutoGeneratedCondition;
import org.htmlcleaner.conditional.TagNodeNameCondition;

public class CleanerProperties implements HtmlModificationListener {
    public static final String BOOL_ATT_EMPTY = "empty";
    public static final String BOOL_ATT_SELF = "self";
    public static final String BOOL_ATT_TRUE = "true";
    public static final String DEFAULT_CHARSET = "UTF-8";
    private boolean addNewlineToHeadAndBody;
    private boolean advancedXmlEscape;
    private boolean allowHtmlInsideAttributes;
    private boolean allowMultiWordAttributes;
    private Set<ITagNodeCondition> allowTagSet = new HashSet();
    private String allowTags;
    private String booleanAttributeValues;
    private String charset = "UTF-8";
    private CleanerTransformations cleanerTransformations = new CleanerTransformations();
    private List<HtmlModificationListener> htmlModificationListeners;
    private String hyphenReplacementInComment;
    private boolean ignoreQuestAndExclam;
    private boolean keepWhitespaceAndCommentsInHead;
    private boolean namespacesAware;
    private boolean omitComments;
    private boolean omitDeprecatedTags;
    private OptionalOutput omitDoctypeDeclaration;
    private OptionalOutput omitHtmlEnvelope;
    private boolean omitUnknownTags;
    private OptionalOutput omitXmlDeclaration;
    private Set<ITagNodeCondition> pruneTagSet = new HashSet();
    private String pruneTags;
    private boolean recognizeUnicodeChars;
    private ITagInfoProvider tagInfoProvider;
    private boolean transResCharsToNCR;
    private boolean transSpecialEntitiesToNCR;
    private boolean translateSpecialEntities;
    private boolean treatDeprecatedTagsAsContent;
    private boolean treatUnknownTagsAsContent;
    private boolean useCdataForScriptAndStyle;
    private boolean useEmptyElementTags;

    public CleanerProperties() {
        reset();
    }

    public CleanerProperties(ITagInfoProvider iTagInfoProvider) {
        reset();
        this.tagInfoProvider = iTagInfoProvider;
    }

    /* access modifiers changed from: package-private */
    public void setTagInfoProvider(ITagInfoProvider iTagInfoProvider) {
        this.tagInfoProvider = iTagInfoProvider;
    }

    public ITagInfoProvider getTagInfoProvider() {
        return this.tagInfoProvider;
    }

    public boolean isAdvancedXmlEscape() {
        return this.advancedXmlEscape;
    }

    public void setAdvancedXmlEscape(boolean z) {
        this.advancedXmlEscape = z;
    }

    public boolean isTransResCharsToNCR() {
        return this.transResCharsToNCR;
    }

    public void setTransResCharsToNCR(boolean z) {
        this.transResCharsToNCR = z;
    }

    public boolean isUseCdataForScriptAndStyle() {
        return this.useCdataForScriptAndStyle;
    }

    public void setUseCdataForScriptAndStyle(boolean z) {
        this.useCdataForScriptAndStyle = z;
    }

    public boolean isTranslateSpecialEntities() {
        return this.translateSpecialEntities;
    }

    public void setTranslateSpecialEntities(boolean z) {
        this.translateSpecialEntities = z;
    }

    public boolean isRecognizeUnicodeChars() {
        return this.recognizeUnicodeChars;
    }

    public void setRecognizeUnicodeChars(boolean z) {
        this.recognizeUnicodeChars = z;
    }

    public boolean isOmitUnknownTags() {
        return this.omitUnknownTags;
    }

    public void setOmitUnknownTags(boolean z) {
        this.omitUnknownTags = z;
    }

    public boolean isTreatUnknownTagsAsContent() {
        return this.treatUnknownTagsAsContent;
    }

    public void setTreatUnknownTagsAsContent(boolean z) {
        this.treatUnknownTagsAsContent = z;
    }

    public boolean isOmitDeprecatedTags() {
        return this.omitDeprecatedTags;
    }

    public void setOmitDeprecatedTags(boolean z) {
        this.omitDeprecatedTags = z;
    }

    public boolean isTreatDeprecatedTagsAsContent() {
        return this.treatDeprecatedTagsAsContent;
    }

    public void setTreatDeprecatedTagsAsContent(boolean z) {
        this.treatDeprecatedTagsAsContent = z;
    }

    public boolean isOmitComments() {
        return this.omitComments;
    }

    public void setOmitComments(boolean z) {
        this.omitComments = z;
    }

    public boolean isOmitXmlDeclaration() {
        return this.omitXmlDeclaration == OptionalOutput.omit;
    }

    public void setOmitXmlDeclaration(boolean z) {
        this.omitXmlDeclaration = z ? OptionalOutput.omit : OptionalOutput.alwaysOutput;
    }

    public boolean isOmitDoctypeDeclaration() {
        return this.omitDoctypeDeclaration == OptionalOutput.omit || isOmitHtmlEnvelope();
    }

    public void setOmitDoctypeDeclaration(boolean z) {
        this.omitDoctypeDeclaration = z ? OptionalOutput.omit : OptionalOutput.alwaysOutput;
    }

    public boolean isOmitHtmlEnvelope() {
        return this.omitHtmlEnvelope == OptionalOutput.omit;
    }

    public void setOmitHtmlEnvelope(boolean z) {
        this.omitHtmlEnvelope = z ? OptionalOutput.omit : OptionalOutput.alwaysOutput;
    }

    public boolean isUseEmptyElementTags() {
        return this.useEmptyElementTags;
    }

    public void setUseEmptyElementTags(boolean z) {
        this.useEmptyElementTags = z;
    }

    public boolean isAllowMultiWordAttributes() {
        return this.allowMultiWordAttributes;
    }

    public void setAllowMultiWordAttributes(boolean z) {
        this.allowMultiWordAttributes = z;
    }

    public boolean isAllowHtmlInsideAttributes() {
        return this.allowHtmlInsideAttributes;
    }

    public void setAllowHtmlInsideAttributes(boolean z) {
        this.allowHtmlInsideAttributes = z;
    }

    public boolean isIgnoreQuestAndExclam() {
        return this.ignoreQuestAndExclam;
    }

    public void setIgnoreQuestAndExclam(boolean z) {
        this.ignoreQuestAndExclam = z;
    }

    public boolean isNamespacesAware() {
        return this.namespacesAware;
    }

    public void setNamespacesAware(boolean z) {
        this.namespacesAware = z;
    }

    public boolean isAddNewlineToHeadAndBody() {
        return this.addNewlineToHeadAndBody;
    }

    public void setAddNewlineToHeadAndBody(boolean z) {
        this.addNewlineToHeadAndBody = z;
    }

    public boolean isKeepWhitespaceAndCommentsInHead() {
        return this.keepWhitespaceAndCommentsInHead;
    }

    public void setKeepWhitespaceAndCommentsInHead(boolean z) {
        this.keepWhitespaceAndCommentsInHead = z;
    }

    public String getHyphenReplacementInComment() {
        return this.hyphenReplacementInComment;
    }

    public void setHyphenReplacementInComment(String str) {
        this.hyphenReplacementInComment = str;
    }

    public String getPruneTags() {
        return this.pruneTags;
    }

    public void setPruneTags(String str) {
        this.pruneTags = str;
        resetPruneTagSet();
        addTagNameConditions(this.pruneTagSet, str);
    }

    public void addPruneTagNodeCondition(ITagNodeCondition iTagNodeCondition) {
        this.pruneTagSet.add(iTagNodeCondition);
    }

    public Set<ITagNodeCondition> getPruneTagSet() {
        return this.pruneTagSet;
    }

    public String getAllowTags() {
        return this.allowTags;
    }

    public void setAllowTags(String str) {
        this.allowTags = str;
        setAllowTagSet(str);
    }

    private void setAllowTagSet(String str) {
        this.allowTagSet.clear();
        addTagNameConditions(this.allowTagSet, str);
    }

    public boolean isTransSpecialEntitiesToNCR() {
        return this.transSpecialEntitiesToNCR;
    }

    public void setTransSpecialEntitiesToNCR(boolean z) {
        this.transSpecialEntitiesToNCR = z;
    }

    private void addTagNameConditions(Set<ITagNodeCondition> set, String str) {
        if (str != null) {
            StringTokenizer stringTokenizer = new StringTokenizer(str, ",");
            while (stringTokenizer.hasMoreTokens()) {
                set.add(new TagNodeNameCondition(stringTokenizer.nextToken().trim().toLowerCase()));
            }
        }
    }

    public Set<ITagNodeCondition> getAllowTagSet() {
        return this.allowTagSet;
    }

    public void setCharset(String str) {
        this.charset = str;
    }

    public String getCharset() {
        return this.charset;
    }

    public String getBooleanAttributeValues() {
        return this.booleanAttributeValues;
    }

    public void setBooleanAttributeValues(String str) {
        if (BOOL_ATT_SELF.equalsIgnoreCase(str) || BOOL_ATT_EMPTY.equalsIgnoreCase(str) || BOOL_ATT_TRUE.equalsIgnoreCase(str)) {
            this.booleanAttributeValues = str.toLowerCase();
        } else {
            this.booleanAttributeValues = BOOL_ATT_SELF;
        }
    }

    public void reset() {
        this.advancedXmlEscape = true;
        this.useCdataForScriptAndStyle = true;
        this.translateSpecialEntities = true;
        this.recognizeUnicodeChars = true;
        this.omitUnknownTags = false;
        this.treatUnknownTagsAsContent = false;
        this.omitDeprecatedTags = false;
        this.treatDeprecatedTagsAsContent = false;
        this.omitComments = false;
        this.omitXmlDeclaration = OptionalOutput.alwaysOutput;
        this.omitDoctypeDeclaration = OptionalOutput.alwaysOutput;
        this.omitHtmlEnvelope = OptionalOutput.alwaysOutput;
        this.useEmptyElementTags = true;
        this.allowMultiWordAttributes = true;
        this.allowHtmlInsideAttributes = false;
        this.ignoreQuestAndExclam = true;
        this.namespacesAware = true;
        this.addNewlineToHeadAndBody = true;
        this.keepWhitespaceAndCommentsInHead = true;
        this.hyphenReplacementInComment = "=";
        setPruneTags((String) null);
        setAllowTags((String) null);
        this.booleanAttributeValues = BOOL_ATT_SELF;
        this.charset = "UTF-8";
        this.cleanerTransformations.clear();
        resetPruneTagSet();
        this.tagInfoProvider = DefaultTagProvider.INSTANCE;
        this.htmlModificationListeners = new ArrayList();
    }

    private void resetPruneTagSet() {
        this.pruneTagSet.clear();
        this.pruneTagSet.add(TagNodeAutoGeneratedCondition.INSTANCE);
    }

    public CleanerTransformations getCleanerTransformations() {
        return this.cleanerTransformations;
    }

    public void setCleanerTransformations(CleanerTransformations cleanerTransformations2) {
        if (cleanerTransformations2 == null) {
            this.cleanerTransformations.clear();
        } else {
            this.cleanerTransformations = cleanerTransformations2;
        }
    }

    public void addHtmlModificationListener(HtmlModificationListener htmlModificationListener) {
        this.htmlModificationListeners.add(htmlModificationListener);
    }

    public void fireConditionModification(ITagNodeCondition iTagNodeCondition, TagNode tagNode) {
        for (HtmlModificationListener fireConditionModification : this.htmlModificationListeners) {
            fireConditionModification.fireConditionModification(iTagNodeCondition, tagNode);
        }
    }

    public void fireHtmlError(boolean z, TagNode tagNode, ErrorType errorType) {
        for (HtmlModificationListener fireHtmlError : this.htmlModificationListeners) {
            fireHtmlError.fireHtmlError(z, tagNode, errorType);
        }
    }

    public void fireUglyHtml(boolean z, TagNode tagNode, ErrorType errorType) {
        for (HtmlModificationListener fireUglyHtml : this.htmlModificationListeners) {
            fireUglyHtml.fireUglyHtml(z, tagNode, errorType);
        }
    }

    public void fireUserDefinedModification(boolean z, TagNode tagNode, ErrorType errorType) {
        for (HtmlModificationListener fireUserDefinedModification : this.htmlModificationListeners) {
            fireUserDefinedModification.fireUserDefinedModification(z, tagNode, errorType);
        }
    }
}
